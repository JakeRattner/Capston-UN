{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The project I have identified for Capstone relates to UN voting records.  I'm interested in how countries can be grouped into voting blocks based on their voting record corresponding to resolutions raised in the General Assembly (not to be confused with General Assembly the education institution).  Once a grouping structure is defined based on voting using clustering I seek to understand what factors lead to these groupings.\n",
    "\n",
    "Potential variables I've considered include: gross bilateral trade, government type, language(s) spoken, religoin(s), military allience/cooperation.\n",
    "\n",
    "Additionally I would like to be able to use the information derived to build a time-series analysis to describe how these groupings and relationships have changed over time (1948 - 2017)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I've identified several useful data sources but there are certainly issues. \n",
    "\n",
    "My most important data set is the voting records of each country for each resolution.  I have this data, but as you will see from the data below, I'm not able to read everything in, both because I have issues importing one of the .tab files and because several of the files are in 'R' \n",
    "\n",
    "Risks:\n",
    "- Not being able to extract from R\n",
    "- Not being able to properly merge data files\n",
    "- Not able to find acquire and merge additional variable data such as bilateral trade\n",
    "- Model does not work\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Initial EDA on Raw UNGA dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data set is taken from here: https://dataverse.harvard.edu/dataset.xhtml?persistentId=hdl:1902.1/12379"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "import requests\n",
    "import json\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "from IPython.display import Image\n",
    "from IPython.core.display import HTML \n",
    "\n",
    "from sklearn.cluster import KMeans, k_means\n",
    "from sklearn.metrics import silhouette_score\n",
    "from sklearn.datasets.samples_generator import make_blobs\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "matplotlib.style.use('ggplot')\n",
    "\n",
    "from sklearn.preprocessing import scale\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_votes = pd.read_csv('~/Desktop/dataverse_files/UNVotes1-72.tab',sep='\\t')\n",
    "# This is a long list of vote tallies by resolution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>session</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>Country</th>\n",
       "      <th>Countryname</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>USA</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>1946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>20</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>CAN</td>\n",
       "      <td>Canada</td>\n",
       "      <td>1946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>31</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9</td>\n",
       "      <td>BHS</td>\n",
       "      <td>Bahamas</td>\n",
       "      <td>1946</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rcid  ccode  session  member  vote Country               Countryname  year\n",
       "0   3.0      2      1.0     1.0     1     USA  United States of America  1946\n",
       "1   3.0     20      1.0     1.0     3     CAN                    Canada  1946\n",
       "2   3.0     31      1.0     NaN     9     BHS                   Bahamas  1946"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes.head(3)\n",
    "# This is what the dataset looks like. {rcid: resolution ID, ccode: Country Code, \n",
    "# session: Count of Assemblies from 1946, member: Country member code, vote: desicion on resolution\n",
    "# .....rest is obvious}\n",
    "\n",
    "# vote – Vote choice\n",
    "# 1 – Yes\n",
    "# 2 – Abstain\n",
    "# 3 – No\n",
    "# 8 – Absent\n",
    "# 9 – Not a member"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1099156, 8)"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes.shape\n",
    "# 1,099,156  > 1M rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "rcid           float64\n",
       "ccode            int64\n",
       "session        float64\n",
       "member         float64\n",
       "vote             int64\n",
       "Country         object\n",
       "Countryname     object\n",
       "year             int64\n",
       "dtype: object"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes.dtypes \n",
    "# All seem to be in useable format. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1099156 entries, 0 to 1099155\n",
      "Data columns (total 8 columns):\n",
      "rcid           1099156 non-null float64\n",
      "ccode          1099156 non-null int64\n",
      "session        1098964 non-null float64\n",
      "member         846858 non-null float64\n",
      "vote           1099156 non-null int64\n",
      "Country        1091797 non-null object\n",
      "Countryname    1098987 non-null object\n",
      "year           1099156 non-null int64\n",
      "dtypes: float64(3), int64(3), object(2)\n",
      "memory usage: 67.1+ MB\n",
      "Number of missing values in 'member':252106\n"
     ]
    }
   ],
   "source": [
    "df_votes.info()\n",
    "# Indicates there are a huge number\n",
    "print(\"Number of missing values in 'member':\" +str(1098964-846858))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Countryname</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1091797</td>\n",
       "      <td>1098987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>198</td>\n",
       "      <td>200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>MAR</td>\n",
       "      <td>France</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>5598</td>\n",
       "      <td>5598</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Country Countryname\n",
       "count   1091797     1098987\n",
       "unique      198         200\n",
       "top         MAR      France\n",
       "freq       5598        5598"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes.describe(include=['object'])\n",
    "# This suggests to me countries may have been renamed and kept the same country code.\n",
    "# Requires further inquiry"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x107b6d2e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_votes.year.hist(figsize=(10,4));\n",
    "# looks like voting peaked in the 60's, meaning unclear"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        vote               Countryname   rcid  member\n",
      "129626     1  United States of America  627.0     1.0\n",
      "129627     1                    Canada  627.0     1.0\n",
      "129628     9                   Bahamas  627.0     NaN\n",
      "129629     3                      Cuba  627.0     1.0\n",
      "129630     8                     Haiti  627.0     1.0\n",
      "129631     2        Dominican Republic  627.0     1.0\n",
      "129632     9                   Jamaica  627.0     NaN\n",
      "129633     9       Trinidad and Tobago  627.0     NaN\n",
      "129634     9                  Barbados  627.0     NaN\n",
      "129635     9                  Dominica  627.0     NaN\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10c99c7f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_votes[df_votes.year == 1960][['vote','Countryname','rcid', 'member']].hist()\n",
    "# This appears to show that: 1. There are more non-member votes than member votes in 1960\n",
    "# resolution 'present' most likely.  There are a low number 8's for 'absent'.  These should\n",
    "# be dropped, as an absense is usually due to a structural problem such as a civil war or \n",
    "# financial crisis.  \n",
    "# 3's show there are a large number of abstaining votes.  Literature shows this is generally \n",
    "# a negative refletion on that countries view of the resulution, although negative wighting is\n",
    "# somewhat arbitrary\n",
    "\n",
    "print(df_votes[df_votes.year == 1960][['vote','Countryname','rcid', 'member']].head(10))\n",
    "# it appears that countries are labeled as 'Nan' before the country joined the UN.  \n",
    "# I can convert these values to represent a binary, 1 = member, 0 = non_member"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Cleaning and Munging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# I'm going to replace the 'Nan' values in 'member' with 0just to clean this up a bit and \n",
    "# hopefuly use the value for future analysis\n",
    "df_votes.member = df_votes.member.fillna(value=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>vote</th>\n",
       "      <th>Countryname</th>\n",
       "      <th>rcid</th>\n",
       "      <th>member</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>129626</th>\n",
       "      <td>1</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>627.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129627</th>\n",
       "      <td>1</td>\n",
       "      <td>Canada</td>\n",
       "      <td>627.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129628</th>\n",
       "      <td>9</td>\n",
       "      <td>Bahamas</td>\n",
       "      <td>627.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129629</th>\n",
       "      <td>3</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>627.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129630</th>\n",
       "      <td>8</td>\n",
       "      <td>Haiti</td>\n",
       "      <td>627.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        vote               Countryname   rcid  member\n",
       "129626     1  United States of America  627.0     1.0\n",
       "129627     1                    Canada  627.0     1.0\n",
       "129628     9                   Bahamas  627.0     0.0\n",
       "129629     3                      Cuba  627.0     1.0\n",
       "129630     8                     Haiti  627.0     1.0"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes[df_votes.year == 1960][['vote','Countryname','rcid', 'member']].head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>session</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Countryname</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>41021.0</td>\n",
       "      <td>25900</td>\n",
       "      <td>555.0</td>\n",
       "      <td>37.0</td>\n",
       "      <td>37</td>\n",
       "      <td>72520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>30688.0</td>\n",
       "      <td>11526</td>\n",
       "      <td>510.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>34</td>\n",
       "      <td>66640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Argentina</th>\n",
       "      <td>34416.0</td>\n",
       "      <td>4320</td>\n",
       "      <td>405.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>27</td>\n",
       "      <td>52920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Australia</th>\n",
       "      <td>28423.0</td>\n",
       "      <td>16200</td>\n",
       "      <td>270.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>18</td>\n",
       "      <td>35280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austria</th>\n",
       "      <td>31911.0</td>\n",
       "      <td>7015</td>\n",
       "      <td>345.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>23</td>\n",
       "      <td>45080</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                rcid  ccode  session  member  vote   year\n",
       "Countryname                                              \n",
       "Afghanistan  41021.0  25900    555.0    37.0    37  72520\n",
       "Albania      30688.0  11526    510.0    34.0    34  66640\n",
       "Argentina    34416.0   4320    405.0    27.0    27  52920\n",
       "Australia    28423.0  16200    270.0    18.0    18  35280\n",
       "Austria      31911.0   7015    345.0    23.0    23  45080"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes[(df_votes.year == 1960) & (df_votes.vote == 1)].groupby('Countryname').sum().head()\n",
    "#df_votes[(df_votes.year == 1960) & (df_votes.Countryname == \"Australia\")]\n",
    "#users[(users.age < 20) & (users.gender=='M')]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Further EDA and Munging for First Clustering Attempt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>session</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>Country</th>\n",
       "      <th>Countryname</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>USA</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>1946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>20</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>CAN</td>\n",
       "      <td>Canada</td>\n",
       "      <td>1946</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rcid  ccode  session  member  vote Country               Countryname  year\n",
       "0   3.0      2      1.0     1.0     1     USA  United States of America  1946\n",
       "1   3.0     20      1.0     1.0     3     CAN                    Canada  1946"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes.head(2)\n",
    "# To add to the model I need to drop the objects from my dataframe (Countr and Countryname)\n",
    "# I can use the country code to merge the names back onto the dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_votes_C = df_votes.drop(['Country', 'Countryname'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>session</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.0</td>\n",
       "      <td>20</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1946</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rcid  ccode  session  member  vote  year\n",
       "0   3.0      2      1.0     1.0     1  1946\n",
       "1   3.0     20      1.0     1.0     3  1946"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes_C.head(2)\n",
    "# Updted df w/out objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1099156 entries, 0 to 1099155\n",
      "Data columns (total 6 columns):\n",
      "rcid       1099156 non-null float64\n",
      "ccode      1099156 non-null int64\n",
      "session    1098964 non-null float64\n",
      "member     1099156 non-null float64\n",
      "vote       1099156 non-null int64\n",
      "year       1099156 non-null int64\n",
      "dtypes: float64(3), int64(3)\n",
      "memory usage: 50.3 MB\n"
     ]
    }
   ],
   "source": [
    "df_votes_C.info()\n",
    "# looks like there are still some 'nulls' in session series.  Will ignore for now \n",
    "# because I expect to filter on year at the moment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# I want to cluster resolution votes on 1s and 0s alone to start.  How will I eliminate adding\n",
    "# records that have a different vote score?  I'll start by creating two DFs for the year 1960\n",
    "# just to see how many times a country will vote under the diff 'vote categories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# creating a df for 1960 alone\n",
    "df_votes_1960 = df_votes_C[df_votes.year == 1960]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    2577\n",
       "2    1084\n",
       "3    1461\n",
       "8     276\n",
       "9    5240\n",
       "Name: vote, dtype: int64"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now I want to group by vote type. Just to see\n",
    "df_votes_1960.vote.value_counts().sort_index()\n",
    "#It looks like '9' for non-members is the domminant cat.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>session</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Countryname</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>52011.0</td>\n",
       "      <td>33210</td>\n",
       "      <td>810.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>486</td>\n",
       "      <td>105840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>52011.0</td>\n",
       "      <td>12528</td>\n",
       "      <td>810.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>486</td>\n",
       "      <td>105840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Angola</th>\n",
       "      <td>52011.0</td>\n",
       "      <td>29160</td>\n",
       "      <td>810.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>486</td>\n",
       "      <td>105840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Antigua and Barbuda</th>\n",
       "      <td>52011.0</td>\n",
       "      <td>3132</td>\n",
       "      <td>810.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>486</td>\n",
       "      <td>105840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Armenia</th>\n",
       "      <td>52011.0</td>\n",
       "      <td>20034</td>\n",
       "      <td>810.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>486</td>\n",
       "      <td>105840</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        rcid  ccode  session  member  vote    year\n",
       "Countryname                                                       \n",
       "Algeria              52011.0  33210    810.0     0.0   486  105840\n",
       "Andorra              52011.0  12528    810.0     0.0   486  105840\n",
       "Angola               52011.0  29160    810.0     0.0   486  105840\n",
       "Antigua and Barbuda  52011.0   3132    810.0     0.0   486  105840\n",
       "Armenia              52011.0  20034    810.0     0.0   486  105840"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now I want to see which countries aren't members\n",
    "# Appears to show that about 98 nations represented in the data set were not members\n",
    "# at the time of voting.  Given the list of countries this make intuitive sense given\n",
    "# that most are obviously not yet countries in 1960 or are developing nations, which\n",
    "# in 1960 were not well represented in the UN General Assembly\n",
    "\n",
    "df_votes[(df_votes.year == 1960) & (df_votes.vote == 9)].groupby('Countryname').sum().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# After confirming the meaning of non-member 'votes' I'm going to drop all of the countries\n",
    "# in 1960 that were not members from the df_votes_1960 dataframe. I believe I can drop all \n",
    "# non-member records from the entire df, but I will wait for the moment:\n",
    "\n",
    "df_votes_1960_members = df_votes_1960[df_votes_1960.member == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    2577\n",
       "2    1084\n",
       "3    1461\n",
       "8     276\n",
       "9       2\n",
       "Name: vote, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes_1960_members.vote.value_counts().sort_index()\n",
    "# I wonder where the 2 \"9\" value \"non-member\" votes are coming from.  Next cell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>session</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>149821</th>\n",
       "      <td>9040.0</td>\n",
       "      <td>475</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>150018</th>\n",
       "      <td>9041.0</td>\n",
       "      <td>475</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>9</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          rcid  ccode  session  member  vote  year\n",
       "149821  9040.0    475     15.0     1.0     9  1960\n",
       "150018  9041.0    475     15.0     1.0     9  1960"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes_1960_members[df_votes_1960_members.vote == 9]\n",
    "# Nigeria is the only country that has a non-member vote as a member\n",
    "# This is a coding error.  They became a member, but at the time of voting\n",
    "# They were not yet a member.  This goes to the pt that dropping recodes based \n",
    "# on recorded membership my create minor errors in this data set.  'Vote' is a more \n",
    "# precise measure for indicating whether a country is a member at the time of the resolution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    2577\n",
       "3    1461\n",
       "Name: vote, dtype: int64"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I'm going to create a new DF for testing where I only look at 1960 w/only votes \n",
    "# for 'yes' and 'no'\n",
    "df_votes_1960_binary = df_votes_1960[(df_votes_1960.vote <= 1) | (df_votes_1960.vote == 3)]\n",
    "df_votes_1960_binary.vote.value_counts()\n",
    "# My data set now shows only yes and no votes in 1960"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>session</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>129626</th>\n",
       "      <td>627.0</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129627</th>\n",
       "      <td>627.0</td>\n",
       "      <td>20</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129629</th>\n",
       "      <td>627.0</td>\n",
       "      <td>40</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129644</th>\n",
       "      <td>627.0</td>\n",
       "      <td>91</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129647</th>\n",
       "      <td>627.0</td>\n",
       "      <td>94</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         rcid  ccode  session  member  vote  year\n",
       "129626  627.0      2     15.0     1.0     1  1960\n",
       "129627  627.0     20     15.0     1.0     1  1960\n",
       "129629  627.0     40     15.0     1.0     3  1960\n",
       "129644  627.0     91     15.0     1.0     3  1960\n",
       "129647  627.0     94     15.0     1.0     3  1960"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes_1960_binary.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/jakerattner/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py:3110: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self[name] = value\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>session</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>129626</th>\n",
       "      <td>627.0</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129627</th>\n",
       "      <td>627.0</td>\n",
       "      <td>20</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         rcid  ccode  session  member  vote  year\n",
       "129626  627.0      2     15.0     1.0     1  1960\n",
       "129627  627.0     20     15.0     1.0     1  1960"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# I want to turn my 1 = yes and 3 = no into 0 = no and 1 = yes\n",
    "\n",
    "#df_votes_1960_binary\n",
    "df_votes_1960_binary.vote = df_votes_1960_binary.vote.replace(to_replace=3, value=0, inplace=False, limit=None, regex=False, method='pad', axis=None)\n",
    "df_votes_1960_binary.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "features = ['']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'features' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-68-437acd81c480>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKMeans\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_clusters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_iter\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_votes_1960_binary\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Check our results.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'features' is not defined"
     ]
    }
   ],
   "source": [
    "\n",
    "# Run k-means against our two features with three clusters.\n",
    "k = 3\n",
    "model = KMeans(n_clusters=k, max_iter=1)\n",
    "model.fit(df_votes_1960_binary[features].values)\n",
    "\n",
    "# Check our results.\n",
    "# Assign clusters back to our DataFrame.\n",
    "df_votes_1960_binary['cluster'] = model.labels_\n",
    "\n",
    "# Get our centroids.\n",
    "centroids    =  model.cluster_centers_\n",
    "cc           =  pd.DataFrame(centroids)\n",
    "\n",
    "# Set up some colors for plotting (for later).\n",
    "colors = {'D':'red', 'E':'blue', 'F':'green', 'H': 'yellow'}\n",
    "base_colors  =  ['r', 'g', 'b', 'y']\n",
    "colors       =  [base_colors[centroid] for centroid in model.labels_]\n",
    "\n",
    "# Update x and y of our final clusters to plot later.\n",
    "fig, ax      =  plt.subplots(figsize=(7,6))\n",
    "\n",
    "# Plot the scatter of our points with calculated centroids.\n",
    "ax.scatter(df_votes_1960_binary[features[0]], df_votes_1960_binary[features[1]], c=colors)\n",
    "ax.scatter(cc[0], cc[1], c=base_colors, s=100) # cc.index\n",
    "\n",
    "# And our score is:\n",
    "print (\"Silhouette Score: \", silhouette_score(df_votes_1960_binary[features], df_votes_1960_binary['cluster'], metric='euclidean'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'cluster'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-28-4b9c2466c6f1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_votes_1960_binary\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcluster\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue_counts\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   3079\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3080\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3081\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3082\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3083\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'cluster'"
     ]
    }
   ],
   "source": [
    "df_votes_1960_binary.cluster.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>session</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>129626</th>\n",
       "      <td>627.0</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134551</th>\n",
       "      <td>652.0</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134748</th>\n",
       "      <td>653.0</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>130217</th>\n",
       "      <td>630.0</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>134945</th>\n",
       "      <td>654.0</td>\n",
       "      <td>2</td>\n",
       "      <td>15.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         rcid  ccode  session  member  vote  year\n",
       "129626  627.0      2     15.0     1.0     1  1960\n",
       "134551  652.0      2     15.0     1.0     0  1960\n",
       "134748  653.0      2     15.0     1.0     1  1960\n",
       "130217  630.0      2     15.0     1.0     1  1960\n",
       "134945  654.0      2     15.0     1.0     0  1960"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_votes_1960_binary.sort_values('ccode').head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# After doing this model with my current dataframe, I realize this makes no sense.  I have\n",
    "# a new row for each resolution/country combo.  Instead make the country the record, \n",
    "# Then I can plot the country, and the binary on their vote for each resolution is the feature\n",
    "# I can start by dropping unused columns (keeping ccode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_1960_features = df_votes_1960_binary.drop([ 'session', 'year'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>129626</th>\n",
       "      <td>627.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129627</th>\n",
       "      <td>627.0</td>\n",
       "      <td>20</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129629</th>\n",
       "      <td>627.0</td>\n",
       "      <td>40</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129644</th>\n",
       "      <td>627.0</td>\n",
       "      <td>91</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129647</th>\n",
       "      <td>627.0</td>\n",
       "      <td>94</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         rcid  ccode  member  vote\n",
       "129626  627.0      2     1.0     1\n",
       "129627  627.0     20     1.0     1\n",
       "129629  627.0     40     1.0     0\n",
       "129644  627.0     91     1.0     0\n",
       "129647  627.0     94     1.0     0"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1960_features.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>v_res</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>129626</th>\n",
       "      <td>627.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>627.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129627</th>\n",
       "      <td>627.0</td>\n",
       "      <td>20</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>627.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129629</th>\n",
       "      <td>627.0</td>\n",
       "      <td>40</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129644</th>\n",
       "      <td>627.0</td>\n",
       "      <td>91</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129647</th>\n",
       "      <td>627.0</td>\n",
       "      <td>94</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         rcid  ccode  member  vote  v_res\n",
       "129626  627.0      2     1.0     1  627.0\n",
       "129627  627.0     20     1.0     1  627.0\n",
       "129629  627.0     40     1.0     0    0.0\n",
       "129644  627.0     91     1.0     0    0.0\n",
       "129647  627.0     94     1.0     0    0.0"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_1960_features['v_res'] = df_1960_features['rcid']*df_1960_features['vote']\n",
    "df_1960_features.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>ccode</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>v_res</th>\n",
       "      <th>res__0.0</th>\n",
       "      <th>res__627.0</th>\n",
       "      <th>res__628.0</th>\n",
       "      <th>res__629.0</th>\n",
       "      <th>res__630.0</th>\n",
       "      <th>...</th>\n",
       "      <th>res__671.0</th>\n",
       "      <th>res__672.0</th>\n",
       "      <th>res__673.0</th>\n",
       "      <th>res__674.0</th>\n",
       "      <th>res__675.0</th>\n",
       "      <th>res__676.0</th>\n",
       "      <th>res__677.0</th>\n",
       "      <th>res__678.0</th>\n",
       "      <th>res__9040.0</th>\n",
       "      <th>res__9041.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>129626</th>\n",
       "      <td>627.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>627.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129627</th>\n",
       "      <td>627.0</td>\n",
       "      <td>20</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>627.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129629</th>\n",
       "      <td>627.0</td>\n",
       "      <td>40</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129644</th>\n",
       "      <td>627.0</td>\n",
       "      <td>91</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129647</th>\n",
       "      <td>627.0</td>\n",
       "      <td>94</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         rcid  ccode  member  vote  v_res  res__0.0  res__627.0  res__628.0  \\\n",
       "129626  627.0      2     1.0     1  627.0         0           1           0   \n",
       "129627  627.0     20     1.0     1  627.0         0           1           0   \n",
       "129629  627.0     40     1.0     0    0.0         1           0           0   \n",
       "129644  627.0     91     1.0     0    0.0         1           0           0   \n",
       "129647  627.0     94     1.0     0    0.0         1           0           0   \n",
       "\n",
       "        res__629.0  res__630.0     ...       res__671.0  res__672.0  \\\n",
       "129626           0           0     ...                0           0   \n",
       "129627           0           0     ...                0           0   \n",
       "129629           0           0     ...                0           0   \n",
       "129644           0           0     ...                0           0   \n",
       "129647           0           0     ...                0           0   \n",
       "\n",
       "        res__673.0  res__674.0  res__675.0  res__676.0  res__677.0  \\\n",
       "129626           0           0           0           0           0   \n",
       "129627           0           0           0           0           0   \n",
       "129629           0           0           0           0           0   \n",
       "129644           0           0           0           0           0   \n",
       "129647           0           0           0           0           0   \n",
       "\n",
       "        res__678.0  res__9040.0  res__9041.0  \n",
       "129626           0            0            0  \n",
       "129627           0            0            0  \n",
       "129629           0            0            0  \n",
       "129644           0            0            0  \n",
       "129647           0            0            0  \n",
       "\n",
       "[5 rows x 60 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dummy variable for each yes-vote/resolution combination\n",
    "# and concatinate with the previous df_1960_dummies dataframe\n",
    "# Now need to drop the res_0.0 column and group_by.sum() the df\n",
    "df_1960_dummies = pd.concat([df_1960_features,pd.get_dummies(df_1960_features.v_res, prefix='res_')], axis = 1)\n",
    "df_1960_dummies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# need to drop res_0.0 column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(99, 59)"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t = df_1960_dummies.groupby('ccode').sum()\n",
    "df_t.shape\n",
    "# there were 54 resolutions in 1960\n",
    "# I'm going to have to do something to make each resultion its own column\n",
    "# That column will need to look at the vote for the country in the row and assign a binary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rcid</th>\n",
       "      <th>member</th>\n",
       "      <th>vote</th>\n",
       "      <th>v_res</th>\n",
       "      <th>res__0.0</th>\n",
       "      <th>res__627.0</th>\n",
       "      <th>res__628.0</th>\n",
       "      <th>res__629.0</th>\n",
       "      <th>res__630.0</th>\n",
       "      <th>res__631.0</th>\n",
       "      <th>...</th>\n",
       "      <th>res__671.0</th>\n",
       "      <th>res__672.0</th>\n",
       "      <th>res__673.0</th>\n",
       "      <th>res__674.0</th>\n",
       "      <th>res__675.0</th>\n",
       "      <th>res__676.0</th>\n",
       "      <th>res__677.0</th>\n",
       "      <th>res__678.0</th>\n",
       "      <th>res__9040.0</th>\n",
       "      <th>res__9041.0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ccode</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>45332.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>21</td>\n",
       "      <td>30373.0</td>\n",
       "      <td>23</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>45461.0</td>\n",
       "      <td>44.0</td>\n",
       "      <td>27</td>\n",
       "      <td>34397.0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>50058.0</td>\n",
       "      <td>51.0</td>\n",
       "      <td>37</td>\n",
       "      <td>41018.0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>42150.0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>25</td>\n",
       "      <td>33118.0</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>31679.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>16</td>\n",
       "      <td>27172.0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 59 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          rcid  member  vote    v_res  res__0.0  res__627.0  res__628.0  \\\n",
       "ccode                                                                     \n",
       "2      45332.0    44.0    21  30373.0        23           1           1   \n",
       "20     45461.0    44.0    27  34397.0        17           1           1   \n",
       "40     50058.0    51.0    37  41018.0        14           0           0   \n",
       "41     42150.0    39.0    25  33118.0        14           0           1   \n",
       "42     31679.0    23.0    16  27172.0         7           0           1   \n",
       "\n",
       "       res__629.0  res__630.0  res__631.0     ...       res__671.0  \\\n",
       "ccode                                         ...                    \n",
       "2               0           1           0     ...                0   \n",
       "20              0           1           0     ...                0   \n",
       "40              1           0           1     ...                1   \n",
       "41              0           1           0     ...                0   \n",
       "42              0           1           0     ...                0   \n",
       "\n",
       "       res__672.0  res__673.0  res__674.0  res__675.0  res__676.0  res__677.0  \\\n",
       "ccode                                                                           \n",
       "2               1           0           0           0           0           0   \n",
       "20              1           1           1           1           0           0   \n",
       "40              0           1           1           1           1           1   \n",
       "41              1           0           1           1           1           0   \n",
       "42              0           0           1           1           0           0   \n",
       "\n",
       "       res__678.0  res__9040.0  res__9041.0  \n",
       "ccode                                        \n",
       "2               1            1            1  \n",
       "20              1            1            1  \n",
       "40              0            1            1  \n",
       "41              0            1            1  \n",
       "42              0            1            1  \n",
       "\n",
       "[5 rows x 59 columns]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_t = df_t.drop(['v_res', 'res__0.0', 'vote','member','rcid'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['res__627.0',\n",
       " 'res__628.0',\n",
       " 'res__629.0',\n",
       " 'res__630.0',\n",
       " 'res__631.0',\n",
       " 'res__632.0',\n",
       " 'res__633.0',\n",
       " 'res__634.0',\n",
       " 'res__635.0',\n",
       " 'res__636.0',\n",
       " 'res__637.0',\n",
       " 'res__638.0',\n",
       " 'res__639.0',\n",
       " 'res__640.0',\n",
       " 'res__641.0',\n",
       " 'res__642.0',\n",
       " 'res__643.0',\n",
       " 'res__644.0',\n",
       " 'res__645.0',\n",
       " 'res__646.0',\n",
       " 'res__647.0',\n",
       " 'res__648.0',\n",
       " 'res__649.0',\n",
       " 'res__650.0',\n",
       " 'res__651.0',\n",
       " 'res__652.0',\n",
       " 'res__653.0',\n",
       " 'res__654.0',\n",
       " 'res__655.0',\n",
       " 'res__656.0',\n",
       " 'res__657.0',\n",
       " 'res__658.0',\n",
       " 'res__659.0',\n",
       " 'res__660.0',\n",
       " 'res__661.0',\n",
       " 'res__662.0',\n",
       " 'res__663.0',\n",
       " 'res__664.0',\n",
       " 'res__665.0',\n",
       " 'res__666.0',\n",
       " 'res__667.0',\n",
       " 'res__668.0',\n",
       " 'res__669.0',\n",
       " 'res__670.0',\n",
       " 'res__671.0',\n",
       " 'res__672.0',\n",
       " 'res__673.0',\n",
       " 'res__674.0',\n",
       " 'res__675.0',\n",
       " 'res__676.0',\n",
       " 'res__677.0',\n",
       " 'res__678.0',\n",
       " 'res__9040.0',\n",
       " 'res__9041.0']"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(df_t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1108500f0>"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11075d438>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "features = list(df_t)\n",
    "features\n",
    "df_t[features].plot(kind=\"scatter\", x=features[0], y=features[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>res__627.0</th>\n",
       "      <th>res__628.0</th>\n",
       "      <th>res__629.0</th>\n",
       "      <th>res__630.0</th>\n",
       "      <th>res__631.0</th>\n",
       "      <th>res__632.0</th>\n",
       "      <th>res__633.0</th>\n",
       "      <th>res__634.0</th>\n",
       "      <th>res__635.0</th>\n",
       "      <th>res__636.0</th>\n",
       "      <th>...</th>\n",
       "      <th>res__671.0</th>\n",
       "      <th>res__672.0</th>\n",
       "      <th>res__673.0</th>\n",
       "      <th>res__674.0</th>\n",
       "      <th>res__675.0</th>\n",
       "      <th>res__676.0</th>\n",
       "      <th>res__677.0</th>\n",
       "      <th>res__678.0</th>\n",
       "      <th>res__9040.0</th>\n",
       "      <th>res__9041.0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ccode</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 54 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       res__627.0  res__628.0  res__629.0  res__630.0  res__631.0  res__632.0  \\\n",
       "ccode                                                                           \n",
       "2               1           1           0           1           0           0   \n",
       "20              1           1           0           1           0           0   \n",
       "40              0           0           1           0           1           1   \n",
       "41              0           1           0           1           0           0   \n",
       "42              0           1           0           1           0           0   \n",
       "\n",
       "       res__633.0  res__634.0  res__635.0  res__636.0     ...       \\\n",
       "ccode                                                     ...        \n",
       "2               0           1           1           1     ...        \n",
       "20              0           1           1           1     ...        \n",
       "40              1           0           0           0     ...        \n",
       "41              0           1           1           1     ...        \n",
       "42              0           1           1           1     ...        \n",
       "\n",
       "       res__671.0  res__672.0  res__673.0  res__674.0  res__675.0  res__676.0  \\\n",
       "ccode                                                                           \n",
       "2               0           1           0           0           0           0   \n",
       "20              0           1           1           1           1           0   \n",
       "40              1           0           1           1           1           1   \n",
       "41              0           1           0           1           1           1   \n",
       "42              0           0           0           1           1           0   \n",
       "\n",
       "       res__677.0  res__678.0  res__9040.0  res__9041.0  \n",
       "ccode                                                    \n",
       "2               0           1            1            1  \n",
       "20              0           1            1            1  \n",
       "40              1           0            1            1  \n",
       "41              0           0            1            1  \n",
       "42              0           0            1            1  \n",
       "\n",
       "[5 rows x 54 columns]"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t[features].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Silhouette Score:  0.347079496896\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1108d5588>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Run k-means against our features with three clusters.\n",
    "k = 2\n",
    "model = KMeans(n_clusters=k, max_iter=1)\n",
    "model.fit(df_t[features].values)\n",
    "\n",
    "# Check our results.\n",
    "# Assign clusters back to our DataFrame.\n",
    "df_t['cluster'] = model.labels_\n",
    "\n",
    "# Get our centroids.\n",
    "centroids    =  model.cluster_centers_\n",
    "cc           =  pd.DataFrame(centroids)\n",
    "\n",
    "# Set up some colors for plotting (for later).\n",
    "colors = {'D':'red', 'E':'blue', 'F':'green', 'H': 'yellow'}\n",
    "base_colors  =  ['r', 'g', 'b', 'y']\n",
    "colors       =  [base_colors[centroid] for centroid in model.labels_]\n",
    "\n",
    "# Update x and y of our final clusters to plot later.\n",
    "fig, ax      =  plt.subplots(figsize=(7,6))\n",
    "\n",
    "# Plot the scatter of our points with calculated centroids.\n",
    "ax.scatter(df_t[features[0]], df_t[features[1]], c=colors)\n",
    "ax.scatter(cc[0], cc[1], c=base_colors, s=100) # cc.index\n",
    "\n",
    "# And our score is:\n",
    "print (\"Silhouette Score: \", silhouette_score(df_t[features], df_t['cluster'], metric='euclidean'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    62\n",
       "1    37\n",
       "Name: cluster, dtype: int64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_t.cluster.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "'tsne' can be used in an attempt to visualize high dimensional data.  Should be a packeage that can take cluster labels and data an position on a plane to visualize closeness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Junk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# users[users.age == 20]\n",
    "#\n",
    "# Select one column from the filtered results.\n",
    "# users[users.age < 20].occupation\n",
    "# users[users.age < 20].occupation.value_counts()\n",
    "# users[(users.age < 20) & (users.gender=='M')]\n",
    "# users[users.occupation.isin(['doctor', 'lawyer'])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pd.merge(df_votes, df_descriptions, on='rcid')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_points = pd.read_csv('~/Desktop/dataverse_files/IdealpointsPublished.tab',sep='\\t')\n",
    "# df points is Ideal point data. Unit of analysis is the country-session \n",
    "# (which corresponds closely but not perfectly, to country-year). This \n",
    "# contains country-specific ideal point estimates. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_points.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_dyadic = pd.read_csv('~/Desktop/dataverse_files/Dyadicdata.tab',sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_dyadic.columns\n",
    "# Dyadid affinity and ideal point data. Unit of analysis is the dyad-session (year). \n",
    "# This file contains distances between country ideal points as well as Affinity scores \n",
    "# (although we recommend against using these). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_descriptions = pd.read_csv('~/documents/UN-Capstone/Dscription.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_descriptions.tail(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_descriptions.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_UNAid = pd.read_csv('~/documents/UN-Capstone/net_aid.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_UNAid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
